import * as core from '@actions/core'
import * as git from './git'
import * as github from '@actions/github'
import { WebhookPayload } from '@actions/github/lib/interfaces'
import { Inputs } from './run'

const commitMessage = `Generated by GitHub Actions (${github.context.workflow} / ${github.context.job})

${github.context.serverUrl}/${github.context.repo.owner}/${github.context.repo.repo}/actions/runs/${github.context.runId}`

export const handlePullRequestEvent = async (inputs: Inputs) => {
  const { payload } = github.context
  if (!isPullRequestPayload(payload)) {
    throw new Error(`invalid pull_request payload`)
  }
  const head = payload.pull_request.head.ref

  core.info(`Updating the head branch ${head}`)
  await git.fetchBranch({ ref: github.context.ref, depth: 2, token: inputs.token })
  await git.updateBranch({ ref: `refs/heads/${head}`, commitMessage, token: inputs.token })

  core.summary.addHeading('Automatically updated the pull request')
  core.summary.addRaw(`GitHub Actions added a commit to the head branch ${head}.`)
  await core.summary.write()

  if (payload.action === 'opened' || payload.action === 'synchronize') {
    // fail if the head ref is outdated
    throw new Error(`GitHub Actions added a commit to the pull request. Check the status of the new commit.`)
  }
  return
}

type PullRequestPayload = WebhookPayload & {
  pull_request: WebhookPayload['pull_request'] & {
    head: {
      ref: string
    }
  }
}

const isPullRequestPayload = (payload: WebhookPayload): payload is PullRequestPayload => {
  if (payload.pull_request === undefined) {
    return false
  }
  const { head } = payload.pull_request
  return typeof head === 'object' && 'ref' in head
}
