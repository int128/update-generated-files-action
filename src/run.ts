import * as core from '@actions/core'
import * as git from './git'
import * as github from '@actions/github'
import { WebhookPayload } from '@actions/github/lib/interfaces'

const authorName = 'update-generated-files-action'

const commitMessage = `Generated by GitHub Actions (${github.context.workflow} / ${github.context.job})

${github.context.serverUrl}/${github.context.repo.owner}/${github.context.repo.repo}/actions/runs/${github.context.runId}`

type Inputs = {
  title: string
  body: string
  token: string
}

export const run = async (inputs: Inputs): Promise<void> => {
  if ((await git.status()) === '') {
    core.info('Nothing to commit')
    return
  }

  await git.setConfigUser(authorName, '41898282+github-actions[bot]@users.noreply.github.com')

  if (github.context.eventName === 'pull_request') {
    return await handlePullRequestEvent(inputs)
  }
  await handleOtherEvent(inputs)
}

type PullRequestPayload = WebhookPayload & {
  pull_request: WebhookPayload['pull_request'] & {
    head: {
      ref: string
    }
  }
}

const isPullRequestPayload = (payload: WebhookPayload): payload is PullRequestPayload => {
  if (payload.pull_request === undefined) {
    return false
  }
  const { head } = payload.pull_request
  return typeof head === 'object' && 'ref' in head
}

const handlePullRequestEvent = async (inputs: Inputs) => {
  const { payload } = github.context
  if (!isPullRequestPayload(payload)) {
    throw new Error(`invalid pull_request payload`)
  }
  const head = payload.pull_request.head.ref

  core.info(`Updating the head branch ${head}`)
  await git.fetchBranch({ ref: github.context.ref, depth: 2, token: inputs.token })
  await git.updateBranch({ ref: `refs/heads/${head}`, commitMessage, token: inputs.token })

  // fail only if the head ref is outdated
  if (payload.action === 'opened' || payload.action === 'synchronize') {
    throw new Error(
      `GitHub Actions automatically added a commit to the pull request. CI should pass on the new commit.`
    )
  }
  return
}

const handleOtherEvent = async (inputs: Inputs) => {
  const octokit = github.getOctokit(inputs.token)
  const head = `update-generated-files-${github.context.sha}-${github.context.runNumber}`
  core.info(`Creating a head branch ${head}`)
  await git.createBranch({ branch: head, commitMessage, token: inputs.token })

  const body = `Hi @${github.context.actor},

${inputs.body}

----

Created by [GitHub Actions](${github.context.serverUrl}/${github.context.repo.owner}/${github.context.repo.repo}/actions/runs/${github.context.runId}) at ${github.context.ref}.
`

  const [, , base] = github.context.ref.split('/')
  core.info(`Creating a pull request for ${base} branch`)
  const { data: pull } = await octokit.rest.pulls.create({
    ...github.context.repo,
    base,
    head,
    title: inputs.title,
    body,
  })
  core.info(`Created ${pull.html_url}`)
  core.summary.addHeading(`Created a pull request: ${inputs.title}`)
  core.summary.addLink(`${pull.base.repo.full_name}#${pull.number}`, pull.html_url)
  await core.summary.write()

  core.info(`Requesting a review to ${github.context.actor}`)
  try {
    await octokit.rest.pulls.requestReviewers({
      ...github.context.repo,
      pull_number: pull.number,
      reviewers: [github.context.actor],
    })
  } catch (e) {
    core.info(`could not request a review to ${github.context.actor}: ${String(e)}`)
  }

  core.info(`Adding ${github.context.actor} to assignees`)
  try {
    await octokit.rest.issues.addAssignees({
      ...github.context.repo,
      issue_number: pull.number,
      assignees: [github.context.actor],
    })
  } catch (e) {
    core.info(`could not assign ${github.context.actor}: ${String(e)}`)
  }

  if (github.context.eventName === 'push') {
    // fail only if the ref is outdated
    throw new Error(
      `You may need to fix the generated files in ${github.context.ref}. Review the pull request: ${pull.html_url}`
    )
  }
}
