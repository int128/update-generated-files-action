import * as core from '@actions/core'
import * as git from './git'
import * as github from '@actions/github'
import { Inputs } from './run'

const commitMessage = `Generated by GitHub Actions (${github.context.workflow} / ${github.context.job})

${github.context.serverUrl}/${github.context.repo.owner}/${github.context.repo.repo}/actions/runs/${github.context.runId}`

export const handleOtherEvent = async (inputs: Inputs) => {
  const octokit = github.getOctokit(inputs.token)
  const head = `update-generated-files-${github.context.sha}-${github.context.runNumber}`
  core.info(`Creating a head branch ${head}`)
  await git.createBranch({ branch: head, commitMessage, token: inputs.token })

  const body = `Hi @${github.context.actor},

${inputs.body}

----

Generated by [GitHub Actions (${github.context.workflow} / ${github.context.job})](${github.context.serverUrl}/${github.context.repo.owner}/${github.context.repo.repo}/actions/runs/${github.context.runId})
`

  const [, , base] = github.context.ref.split('/')
  core.info(`Creating a pull request for ${base} branch`)
  const { data: pull } = await octokit.rest.pulls.create({
    ...github.context.repo,
    base,
    head,
    title: inputs.title,
    body,
  })
  core.info(`Created ${pull.html_url}`)
  core.summary.addHeading(`Created a pull request: ${inputs.title}`)
  core.summary.addLink(`${pull.base.repo.full_name}#${pull.number}`, pull.html_url)
  await core.summary.write()

  core.info(`Requesting a review to ${github.context.actor}`)
  try {
    await octokit.rest.pulls.requestReviewers({
      ...github.context.repo,
      pull_number: pull.number,
      reviewers: [github.context.actor],
    })
  } catch (e) {
    core.info(`could not request a review to ${github.context.actor}: ${String(e)}`)
  }

  core.info(`Adding ${github.context.actor} to assignees`)
  try {
    await octokit.rest.issues.addAssignees({
      ...github.context.repo,
      issue_number: pull.number,
      assignees: [github.context.actor],
    })
  } catch (e) {
    core.info(`could not assign ${github.context.actor}: ${String(e)}`)
  }

  if (github.context.eventName === 'push') {
    // fail if the ref is outdated
    throw new Error(`Please merge ${pull.html_url} to follow up the generated files`)
  }
}
