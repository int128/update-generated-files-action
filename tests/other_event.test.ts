import * as git from '../src/git'
import { handleOtherEvent } from '../src/other_event'

const octokitMock = {
  rest: {
    pulls: {
      create: jest.fn(),
      requestReviewers: jest.fn(),
    },
    issues: {
      addAssignees: jest.fn(),
    },
  },
}

jest.mock('@actions/core')
jest.mock('@actions/github', () => ({ getOctokit: () => octokitMock }))
jest.mock('../src/git')

test('other event', async () => {
  octokitMock.rest.pulls.create.mockResolvedValueOnce({
    data: {
      number: 987,
      html_url: 'https://github.com/int128/update-generated-files-action/pulls/987',
      base: {
        repo: {
          full_name: 'int128/update-generated-files-action',
        },
      },
    },
  })

  await handleOtherEvent(
    {
      commitMessage: 'Generated by GitHub Actions (workflow / job)',
      title: 'Follow up the generated files',
      body: 'Body',
      token: 'GITHUB_TOKEN',
    },
    {
      ref: 'refs/heads/main',
      runNumber: 321,
      actor: 'octocat',
      eventName: 'dummy',
      sha: '0123456789abcdef',
      repo: {
        owner: 'int128',
        repo: 'update-generated-files-action',
      },
    }
  )

  expect(git.createBranch).toHaveBeenCalledWith({
    branch: 'update-generated-files-0123456789abcdef-321',
    token: 'GITHUB_TOKEN',
    commitMessage: 'Generated by GitHub Actions (workflow / job)',
  })

  expect(octokitMock.rest.pulls.create).toHaveBeenCalled()
  expect(octokitMock.rest.pulls.requestReviewers).toHaveBeenCalled()
  expect(octokitMock.rest.issues.addAssignees).toHaveBeenCalled()
})
